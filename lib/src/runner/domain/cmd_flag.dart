class CmdFlag {
  static const help = CmdFlag('--help', '-h', 'Show help');
  static const unitTest = CmdFlag('--unit-test', '-u', 'Generate unit tests instead of widget tests, Widget tests are generated by default');
  static const reporter = CmdFlag('--reporter', '-r', 'Enable reporter, disable by default');
  static const force = CmdFlag('--force', '-f', 'Force generation, all feature files are overwritten');
  static const newOnly = CmdFlag('--new', '-n', 'Only generate new features, modified feature files are not generated');

  final String longForm;
  final String shortForm;
  final String description;

  const CmdFlag(this.longForm, this.shortForm, this.description);

  CmdFlag copyWith({String? text, String? shortText, String? description, String? value}) {
    return CmdFlag(
      text ?? this.longForm,
      shortText ?? this.shortForm,
      description ?? this.description,
    );
  }

  @override
  String toString() {
    return '$longForm, $shortForm, $description';
  }

  static List<CmdFlag> get values => [unitTest, reporter, force, newOnly, help];

  static CmdFlag fromString(String text) {
    return values.firstWhere(
      (flag) => flag.longForm == text || flag.shortForm == text,
      orElse: () => CmdFlag(text, text, 'Invalid flag'),
    );
  }
}

class CmdFlagValidator {
  static String? validate(List<CmdFlag> flags) {
    for (final flag in flags) {
      if (!CmdFlag.values.contains(flag)) {
        return 'Invalid flag: ${flag.longForm} ${flag.description}';
      }
    }
    if (flags.contains(CmdFlag.newOnly) && flags.contains(CmdFlag.force)) {
      return 'Cannot use --new with --force';
    }
    return null;
  }
}
